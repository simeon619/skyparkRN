import { FlashList } from '@shopify/flash-list';
import React, { useCallback, useEffect, useRef, useState } from 'react';
import { useForm } from 'react-hook-form';

import {
  Animated,
  Dimensions,
  Image,
  Pressable,
  SafeAreaView,
  ScrollView,
  StyleSheet,
  Text,
  View,
} from 'react-native';
import {
  GestureHandlerRootView,
  TouchableOpacity,
} from 'react-native-gesture-handler';
import ImagePicker from 'react-native-image-crop-picker';
import { Modal, Portal } from 'react-native-paper';

import Swiper from 'react-native-swiper';
import BottomSheet, { BottomSheetRefProps } from '../../components/BottomSheet';
import { Header } from '../../components/header';
import { InputPost } from '../../components/Inputs';
import Thread from '../../components/Thread';
import { COLORS } from '../../themes/colors';
import { visibilty } from '../../utils/audience';
import { RATIO_HEADER } from '../../utils/metric';
import { POST_DATA, POST_DATA2 } from '../../utils/posts';
const { width, height: SCREEN_HEIGHT } = Dimensions.get('window');
export const Home = ({ navigation }: any) => {
  const scrollY = new Animated.Value(0, {
    useNativeDriver: true,
  });

  let HEADER_HEIGHT = (RATIO_HEADER * SCREEN_HEIGHT) / 100;

  const diffClamp = Animated.diffClamp(scrollY, 0, HEADER_HEIGHT);

  const headerY = diffClamp.interpolate({
    inputRange: [0, HEADER_HEIGHT],
    outputRange: [0, -HEADER_HEIGHT / 1.8],
    extrapolate: 'clamp',
    // easing: Easing.bounce
  });
  const [uri, setUri] = useState('');
  const chooseImage = () => {
    ImagePicker.openPicker({})
      .then(image => {
        setUri(image.path);
      })
      .catch(e => {
        console.log(e);
      });
  };
  const openCamera = () => {
    ImagePicker.openCamera({})
      .then(image => {
        setUri(image.path);
      })
      .catch(e => {
        console.log(e);
      });
  };
  const swiperRef = useRef<Swiper>(null);
  const [page, setPage] = useState(0);
  const onSwitchPage = (index: number) => {
    if (swiperRef.current) {
      swiperRef.current.scrollTo(index);
    }
  };
  const [refreshing, setRefreshing] = useState(false);
  const [visible, setVisible] = useState(false);
  const showModal = () => {
    setVisible(true);
  };
  const hideModal = () => {
    setVisible(false);
  };
  useEffect(() => {
    if (refreshing) {
      //fetch data
      setRefreshing(false);
    }
  }, [refreshing]);

  const handleScrollHeader = (e: number) => {
    scrollY.setValue(e);
  };

  const [audience, setAudience] = useState('Public');
  const [heightPost, setHeightPost] = useState(0);

  useEffect(() => {
    if (!!uri) {
      Image.getSize(uri, (width, height) => {
        setHeightPost(height);
      });
    }
  }, [uri]);

  const ref = useRef<BottomSheetRefProps>(null);
  const onPress = useCallback(() => {
    const isActive = ref?.current?.isActive();
    if (isActive) {
      ref?.current?.scrollTo(0);
    } else {
      ref?.current?.scrollTo(-350);
    }
  }, []);

  const { control, handleSubmit, setFocus  } = useForm();
  return (
    <>
      <SafeAreaView style={styles.main}>
        <Pressable
          onPress={showModal}
          style={{
            position: 'absolute',
            padding: 14,
            zIndex: 85,
            bottom: 28,
            right: 25,
            borderRadius: 58,
            backgroundColor: '#005e',
          }}>
          <Image
            source={require('../../assets/images/newPost.png')}
            style={{
              width: 28,
              height: 28,
            }}
          />
        </Pressable>

        <Animated.View
          style={[
            {
              position: 'absolute',
              backgroundColor: '#fff',
              elevation: 10,
              left: 0,
              right: 0,
              top: 0,
              minHeight: HEADER_HEIGHT, /// au lieu de jouer avec le header joue avec le flex
              zIndex: 2,
              maxHeight: 150,
              transform: [{ translateY: headerY }],
            },
          ]}>
          <Header
            navigation={navigation}
            page={page}
            onSwitchPage={onSwitchPage}
          />
        </Animated.View>
        <Swiper
          style={styles.wrapper}
          loop={false}
          ref={swiperRef}
          bounces={false}
          showsPagination={false}
          onIndexChanged={i => setPage(i)}>
          {/* news */}
          <Thread
            POST_DATA={POST_DATA}
            handleScrollHeader={handleScrollHeader}
            refreshing={refreshing}
            setRefreshing={setRefreshing}
          />
          {/* Market */}
          <Thread
            POST_DATA={POST_DATA}
            handleScrollHeader={handleScrollHeader}
            refreshing={refreshing}
            setRefreshing={setRefreshing}
          />
        </Swiper>
      </SafeAreaView>
      <Portal>
        <Modal
          visible={visible}
          onDismiss={hideModal}
          contentContainerStyle={[
            {
              backgroundColor: 'white',
              width: '100%',
              height: '100%',
              //
            },
          ]}>
          <GestureHandlerRootView style={{ flex: 1 }}>
            <SafeAreaView
              onTouchStart={e => {
                console.log(e.nativeEvent.identifier);

                if (ref?.current?.isActive) ref?.current?.scrollTo(0);
              }}
              style={{
                width: '100%',
                height: '100%',
                padding: 5,
              }}>
              <View
                style={{
                  flexDirection: 'row',
                  paddingHorizontal: 5,
                  justifyContent: 'space-between',
                  borderBottomWidth: 0.4,
                  backgroundColor: '#fff',
                  borderBottomColor: '#777',
                }}>
                <Pressable onPress={hideModal}>
                  <Image
                    style={{ height: 35, width: 35 }}
                    source={require('../../assets/images/arrowback.png')}
                  />
                </Pressable>
                {!!uri && (
                  <Text
                    style={[
                      {
                        color: 'white',
                        fontSize: 18,
                        backgroundColor: COLORS.blue,
                        paddingHorizontal: 15,
                        paddingVertical: 5,
                        fontFamily: 'Ubuntu-Regular',
                        alignSelf: 'center',
                        letterSpacing: 2,
                        borderRadius: 5,
                      },
                    ]}>
                    Publish
                  </Text>
                )}
              </View>
              <ScrollView style={{ flex: 1 }}>
                <View
                  style={{
                    width: '100%',
                    height: 50,
                    flexDirection: 'row',
                    alignItems: 'center',
                    marginTop: 5,
                    gap: 10,
                  }}>
                  <Image
                    style={styles.avatarPost}
                    source={require('../../assets/images/user.png')}
                  />
                  <TouchableOpacity
                    onPress={onPress}
                    style={{
                      borderColor: COLORS.blue,
                      borderWidth: 1,
                      borderRadius: 5,
                      padding: 5,
                    }}>
                    <Text
                      style={{
                        color: 'black',
                        fontFamily: 'Ubuntu-Regular',
                        fontSize: 15,
                      }}>
                      {audience}
                    </Text>
                  </TouchableOpacity>
                </View>
                <InputPost
                  control={control}
                  name="post"
                  placeholder="Whats' up"
                />

                {uri && (
                  <View
                    style={[
                      {
                        width: '100%',
                        //  SCREEN_HEIGHT: SCREEN_HEIGHTPost,
                        maxHeight: SCREEN_HEIGHT / 1.8,
                      },
                    ]}>
                    <Image
                      resizeMode="cover"
                      source={
                        uri ? { uri } : require('../../assets/images/user.png')
                      }
                      style={{
                        width: '100%',
                        height: '100%',
                      }}
                    />
                  </View>
                )}
              </ScrollView>

              {/* <View style={{ height: 40, width: '100%' }}></View> */}
              <View
                style={{
                  position: 'absolute',
                  bottom: 0,
                  left: 0,
                  right: 0,
                  // height: 0,
                  borderTopColor: COLORS.blue,
                  borderTopWidth: 0.4,
                  paddingVertical: 5,
                  backgroundColor: 'white',
                  paddingHorizontal: 15,
                }}>
                <View
                  style={{
                    justifyContent: 'space-between',
                    flexDirection: 'row',
                  }}>
                  <Pressable onPress={openCamera}>
                    <Image
                      style={styles.icon}
                      source={require('../../assets/images/camera.png')}
                    />
                  </Pressable>

                  <Pressable onPress={chooseImage}>
                    <Image
                      style={styles.icon}
                      source={require('../../assets/images/gallery.png')}
                    />
                  </Pressable>

                  <Pressable>
                    <Image
                      style={styles.icon}
                      source={require('../../assets/images/location.png')}
                    />
                  </Pressable>
                  <Pressable>
                    <Image
                      style={styles.icon}
                      source={require('../../assets/images/ballot.png')}
                    />
                  </Pressable>
                </View>
              </View>
            </SafeAreaView>
            <BottomSheet ref={ref}>
              <View style={{ flex: 1, paddingHorizontal: 10 }}>
                <Text
                  style={{
                    fontSize: 21,
                    fontFamily: 'Ubuntu-Regular',
                    color: '#fff',
                    marginLeft: 10,
                  }}>
                  Choisissez votre audience
                </Text>
                <FlashList
                  data={visibilty}
                  estimatedItemSize={80}
                  renderItem={({ item }) => (
                    <Pressable
                      onPress={() => {
                        ref?.current?.scrollTo(0);
                        setAudience(item.visibilty);
                      }}
                      style={{
                        borderBottomWidth: 1,
                        borderTopWidth: 1,
                        borderBottomColor: 'white',
                        borderTopColor: 'white',
                        flexDirection: 'row',
                        alignItems: 'center',
                        gap: 10,
                        padding: 20,
                        marginTop: 10,
                      }}>
                      <Image
                        source={require('../../assets/images/worldwide.png')}
                        style={{ width: 30, height: 30 }}
                      />
                      <View>
                        <Text
                          style={{
                            fontSize: 17,
                            fontFamily: 'Ubuntu-Regular',
                            color: 'black',
                            fontWeight: '700',
                          }}>
                          {item.visibilty}
                        </Text>
                        <Text
                          style={{
                            fontSize: 12,
                            fontFamily: 'Ubuntu-Regular',
                            color: 'black',
                            fontWeight: '400',
                          }}>
                          {item.description}
                        </Text>
                      </View>
                    </Pressable>
                  )}
                />
              </View>
            </BottomSheet>
          </GestureHandlerRootView>
        </Modal>
      </Portal>
    </>
  );
};

const styles = StyleSheet.create({
  main: {
    flex: 1,
    // backgroundColor: COLORS.white,
  },
  textAreaContainer: {
    borderColor: '#555',
    borderWidth: 1,
    padding: 15,
  },
  placeholder: { fontSize: 16 },
  textArea: {
    padding: 15,
    justifyContent: 'flex-start',
  },
  icon: {
    height: 25,
    width: 25,
    padding: 15,
    tintColor: COLORS.blue,
  },
  avatar: {
    height: 50,
    width: 50,
  },
  avatarPost: {
    height: 40,
    width: 40,
  },
  wrapper: {},
  separator: {
    height: 4,
    width: '100%',
    backgroundColor: 'red',
  },
  BodyContain: {
    // flex : 8
  },
  // HeaderContain: {
  //   position: 'absolute',
  //   backgroundColor: 'purple',
  //   zIndex : 1,
  //   elevation : 1000,
  //   left: 0,
  //   right: 0,
  //   top: 0,
  //   height: HEADER_HEIGHT,
  //   transform : [{translateY : headerY}]
  // },

  // wrapper: {},
  slide1: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#9DD6EB',
  },
  slide2: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#97CAE5',
  },
  slide3: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#92BBD9',
  },
  text: {
    color: '#fff',
    fontSize: 30,
    fontWeight: 'bold',
  },
});
